<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.2-Based Variant V1.1//EN" "dtd/kdex.dtd" [
  <!-- Define an entity for your application if it is not part of KDE
       CVS -->
  <!ENTITY kmyapplication "<application>simon</application>">
  <!ENTITY kappname "&kmyapplication;"><!-- replace kmyapplication here
                                            do *not* replace kappname-->
  <!ENTITY package "kde-module"><!-- kdebase, kdeadmin, etc.  Leave
                                     this unchanged if your
                                     application is not maintained in KDE CVS -->
  <!ENTITY % addindex "IGNORE">
  <!ENTITY % English "INCLUDE"> <!-- ONLY If you are writing non-English
                                     original documentation, change
                                     the language here -->

  <!-- Do not define any other entities; instead, use the entities
       from entities/general.entities and $LANG/user.entities. -->
]>
<!-- kdoctemplate v0.9 January 10 2003
     Changes to comments to clarify entity usage January 10 2003
     Minor update to "Credits and Licenses" section on August 24, 2000
     Removed "Revision history" section on 22 January 2001
     Changed to Installation/Help menu entities 18 October 2001
     Other minor cleanup and changes 18 October 2001
     FPI change and minor changes November 2002 -->

<!--
This template was designed by: David Rugge davidrugge@mindspring.com
with lots of help from: Eric Bischoff ebisch@cybercable.tm.fr
and Frederik Fouvry fouvry@sfs.nphil.uni-tuebingen.de
of the KDE DocBook team.

You may freely use this template for writing any sort of KDE documentation.
If you have any changes or improvements, please let us know.

Remember:
- in XML, the case of the <tags> and attributes is relevant ;
- also, quote all attributes.

Please don't forget to remove all these comments in your final documentation,
thanks ;-).
-->

<!-- ................................................................ -->

<!-- The language must NOT be changed here. -->
<!-- If you are writing original documentation in a language other -->
<!-- than English, change the language above ONLY, not here -->
<book lang="&language;">

<!-- This header contains all of the meta-information for the document such
as Authors, publish date, the abstract, and Keywords -->

<bookinfo>
<title>The &kmyapplication; Handbook</title>

<!-- TRANS:ROLES_OF_TRANSLATORS -->

<copyright>
<year>2008</year>
<holder>Peter Grasch</holder>
</copyright>

<!-- Date and version information of the application
Don't forget to include this last date and this last revision number, we
need them for translation coordination !
Please respect the format of the date (YYYY-MM-DD) and of the version
(V.MM.LL), it could be used by automation scripts.
Do NOT change these in the translation. -->

<date>2008-05-27</date>
<releaseinfo>0.2</releaseinfo>

<!-- Translators: put here the copyright notice of the translation -->
<!-- Put here the FDL notice.  Read the explanation in fdl-notice.docbook
     and in the FDL itself on how to use it. -->
<legalnotice>&FDLNotice;</legalnotice>

<authorgroup>
<author>
<!-- This is just put in as an example.  For real documentation, please
     define a general entity in entities/contributor.entities, e.g.
<!ENTITY George.N.Ugnacious "<personname><firstname>George</firstname><othername>N.</othername><surname>Ugnacious</surname></personname>">
<!ENTITY George.N.Ugnacious.mail "<email>gnu@kde.org</email>">
and use `&George.N.Ugnacious; &George.N.Ugnacious.mail;' in the author element.
 -->
<personname>
<firstname>Peter</firstname>
<othername>H.</othername>
<surname>Grasch</surname>
</personname>
<email>grasch@simon-listens.org</email>
</author>
</authorgroup>

<!-- Abstract about this handbook -->

<abstract>
<para>
&kmyapplication; is an open source speech recognition solution.
</para>
</abstract>

<!-- This is a set of Keywords for indexing by search engines.
Please at least include KDE, the KDE package it is in, the name
 of your application, and a few relevant keywords. -->

<keywordset>
<keyword>KDE</keyword>
<keyword>kdeutils</keyword>
<keyword>Kapp</keyword>
<keyword>simon</keyword>
<keyword>recognition</keyword>
<keyword>speech</keyword>
<keyword>voice</keyword>
<keyword>command</keyword>
<keyword>control</keyword>
<keyword>accessibility</keyword>
</keywordset>

</bookinfo>

<!-- The contents of the documentation begin here.  Label
each chapter so with the id attribute. This is necessary for two reasons: it
allows you to easily reference the chapter from other chapters of your
document, and if there is no ID, the name of the generated HTML files will vary
from time to time making it hard to manage for maintainers and for the CVS
system. Any chapter labelled (OPTIONAL) may be left out at the author's
discretion. Other chapters should not be left out in order to maintain a
consistent documentation style across all KDE apps. -->

<chapter id="introduction">
<title>Introduction</title>

<!-- The introduction chapter contains a brief introduction for the
application that explains what it does and where to report
problems. Basically a long version of the abstract.  Don't include a
revision history. (see installation appendix comment) -->

<para>
&kmyapplication; is the main front end for the simon open source speech recognition solution.

It is a simond client and provides a graphical user interface for managing the speech model and the commands. Moreover, simon can execute all sorts of commands based on the input it receives from the server: simond.
</para>

<para>
In contrast to existing commercial offerings, simon provides a unique do-it-yourself approach to speech recognition. Instead of pre-defined, pre-trained speech models, simon does not ship with any model whatsoever. Instead, it provides an easy to use end-user interface to create language and acoustic models from scratch.

The current release can be used to set up command-and-control solutions especially suitable for the disabled. However, because of the amount of training necessary, continuous, free dictation is neither supported nor reasonable with current versions of simon.
</para>

<para>
Because of it's architecture, the same version of simon can be used with all languages and dialects. One can even mix languages within one model if necessary.
</para>
</chapter>


<chapter id="overview">
<title>Overview</title>

<sect1 id="architecture">
<title>Architecture</title>
<para>
The simon architecture consits of three applications.
<itemizedlist>
  <listitem><para>&kmyapplication;</para><para>This is the main graphical interface.</para><para>It acts as a client to the simond server.</para></listitem>
  <listitem><para>simond</para><para>The recognition server.</para></listitem>
  <listitem><para>ksimond</para><para>A graphical front-end for simond.</para></listitem>
</itemizedlist>
</para>

<para>
simon (the solution as a whole) is a server / client solution. That means that there is one server (simond) for one or more clients (&kmyapplication;; This application). KSimond is just a front-end for simond which means it adds no functionality to the system but rather provides a way to interact with simond graphically.
</para>

<para>
<screenshot>
<screeninfo>Architecture</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="architecture.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>&kmyapplication; is used to create and maintain a representation of your pronunciation and language. This representation is then sent to the server simond which compiles it into a usable speech model.</para>
<para>&kmyapplication; then records sound from the microphone and transmits it to the server which runs the recognition on the received input stream. simond sends the recognition result back to the client (&kmyapplication;).</para>
<para>&kmyapplication; then uses this recognition result to execute commands like opening programs, following links, etc.</para>

<para>simond identifies its connections with a user / password combination which is completely independant from the underlying operating system and its users (which means you have to set up at least one user for simond to use it; see the <ulink url="help:/simond">simond manual</ulink> for details). Every simon client logs onto the server with a user / password combination which identifies a unique user and thus a unique speech model. Every user maintains his own speech model but may use it from different computers (different, physical simon instances) simply by accessing the same simond server. One simond instance can of course also serve multiple users.</para>

</sect1>


<sect1 id="speech_model">
<title>Speech Recognition: Background</title>

<para>
Speech recognition systems take voice input (often from a microphone) and try to translate it into written text. To do that, they rely on statistical representations of human voice. To put it into simple terms: The computer learns how words - or more correctly the sounds that make up those words - sound.
</para>

<para>
A speech model consists of two distinct parts:
<itemizedlist>
  <listitem><para>Language Model</para></listitem>
  <listitem><para>Acoustic Model</para></listitem>
</itemizedlist>
</para>

<sect2 id="language_model">
<title>Language Model</title>

<para>The language model defines the vocabulary and the grammar you want to use.</para>
<para>For more information see the <link linkend="wordlist">vocabulary section</link> and the <link linkend="grammar">grammar section</link>.</para>
</sect2>

<sect2 id="acoustic_model">
<title>Acoustic Model</title>
<para>The acoustic model represents your pronunciation in a machine readable format.</para>

<para>Let's look at the following sample vocabulary:
<table frame='all'><title>Sample Vocabulary</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>
<colspec colname='c1'/>
<colspec colname='c2'/>
<colspec colname='c3'/>
<thead>
<row>
  <entry>Word</entry>
  <entry>Terminal</entry>
  <entry>Pronunciation</entry>
</row>
</thead>
<tbody>
<row>
  <entry>Computer</entry>
  <entry>Noun</entry>
  <entry>k ax m p y uw t er</entry>
</row>
<row>
  <entry>Internet</entry>
  <entry>Noun</entry>
  <entry>ih n t er n eh t</entry>
</row>
<row>
  <entry>Mail</entry>
  <entry>Noun</entry>
  <entry>m ey l</entry>
</row>
<row>
  <entry>close</entry>
  <entry>Verb</entry>
  <entry>k l ow s</entry>
</row>
</tbody>
</tgroup>
</table>
</para>

<para>
The pronunciation of each word is composed of individual sounds which are separated by spaces. For example, the word "close" consists of the following sounds:

<itemizedlist>
  <listitem><para>k</para></listitem>
  <listitem><para>l</para></listitem>
  <listitem><para>ow</para></listitem>
  <listitem><para>s</para></listitem>
</itemizedlist>

The acoustic model uses the fact that spoken words are composed of sounds much like written words are composed of letters. Using this knowledge, we can segment words into sounds (represented by the pronunciation) and assemble them back when recognizing. These building blocks are called "phonemes".
</para>

<para>
Because the acoustic model actually represents how you speak the phonemes of the words, trainings material is shared among all words that use the same phonemes.
</para>
<para>
That means if you add the word "clothes" to the language model, your acoustic model already has an idea how the "clo" part is going to sound as they share the same phonemes ("k", "l", "ow") at the beginning.
</para>
<para>
To train the acoustic model (in other words to tell him how you pronounce the phonemes) you have to "train" words from your language model. That means that simon displays a word which you read out loud. Because the word is listed in your vocabulary, simon already knows what phonemes it contains and can thus "learn" from your pronunciation of the word.
</para>
</sect2>
</sect1>
</chapter>

<chapter id="guidelines">
<title>Guidelines</title>
<para>This chapter lists some general guidelines that are relevant for different parts of simon.</para>

<sect1 id="recording">
<title>Recordings</title>
<para>simon builds it's acoustic model based on transcribed samples of the users voice. Because of this, the recorded samples are of vital importance for the recognition.</para>

<sect2 id="volume">
<title>Volume</title>
<para>It is important that you check your microphone volume before recording any samples.</para>
<para>A simple way to ensure that your microphone is configured correctly is to use an audio editing tool like the free <ulink url="http://audacity.sourceforge.net">Audacity</ulink>.</para>

<para>Open the program and start the recording. Say a few words. Don't yell but don't be overly quiet either. Take into account that you should generally use the same volume setting for all your training and for the recognition too. You might speak a little bit louder (unconsiously) when you are upset or at another time of the day so try to raise your voice a little bit to anticipate this. It is much better to have a little quieter samples than to start clipping.</para>


<para>
Too quiet:
<screenshot>
<screeninfo>Volume: Too quiet</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="too_quiet.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>
Too loud:
<screenshot>
<screeninfo>Volume: Too loud</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="too_loud.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>
Perfect volume:
<screenshot>
<screeninfo>Perfect volume</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="volume_perfect.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

</sect2>

<sect2 id="silence">
<title>Silence</title>
<para>To help simon with the automatic segmentation it is recommended to leave about one or two seconds of silence on the recording before and after reading the prompted text.</para>
</sect2>
</sect1>
</chapter>


<chapter id="using-simon">
<title>Using &kmyapplication;</title>

<para>The following sections will describe how to use simon.</para>

<sect1 id="main_window">
<title>The simon Main Window</title>
<para>
<screenshot>
<screeninfo>A screenshot of &kmyapplication;</screeninfo>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="screenshot_main.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Screenshot</phrase>
	  </textobject>
	</mediaobject>
</screenshot>

The simon main window provides quick access to most of its features through the main toolbar.
</para>

<para>There are 7 main actions listed:
<itemizedlist>
<listitem>
<para>simond connection</para>
<para>This is the only complex menu item. It has several states:
<itemizedlist>
<listitem><para>Connect</para>
<para>When simon is not connected to simond the option says "Connect". When activated, simon will start to connect to simond and change to the "Connecting" state.</para>
<para>Upon connecting to the server from simon for the first time, you might be prompted for a username and a password. If you haven't done so already, set up a user for simond (see the <ulink url="help:/simond">simond manual</ulink> for details) before continuing and enter the same username and corresponding password in the login dialog from simon. If you choose to store the password, you can still change it in the <link linkend="configure_server_general">server configuration</link> at any time.</para>
</listitem>
<listitem><para>Connecting</para>
<para>When simon is currently connecting to the configured simond server(s) the option says "Connecting" and is pressed down. When activated, simon will stop trying to connect to simond and go back to the "Connect" state.</para>
</listitem>
<listitem><para>Activate</para>
<para>When simon established a connection to the server the option will say "Activate" and will not be pressed down. When activated (or automatically when simon is configured to automatically start the recognition when it is available) simon will try to start the recognition.</para>
<para>An option to close the connection to simond ("Disconnect") is available through the small down-arrow next to it.</para>
</listitem>
<listitem><para>Activated</para>
<para>When simon established a connection to the server and has successfully started the recognition the option will say "Activated" and will be pressed down. When activated simon will deactivate the recognition but not close the connection to simond - it changes back to the previous "Activate" state.</para>
<para>An option to close the connection to simond ("Disconnect") is available through the small down-arrow next to it.</para>
</listitem>
</itemizedlist>
</para>
</listitem>


<listitem>
<para>Add Word</para>
<para>Displays the <link linkend="add_word">add word wizard</link>.</para>
</listitem>

<listitem>
<para>Wordlist</para>
<para>Displays the <link linkend="wordlist">wordlist</link>.</para>
</listitem>

<listitem>
<para>Grammar</para>
<para>Displays the <link linkend="grammar">grammar</link>.</para>
</listitem>

<listitem>
<para>Training</para>
<para>Displays the <link linkend="training">training</link>.</para>
</listitem>

<listitem>
<para>Commands</para>
<para>Displays the <link linkend="commands">commands</link>.</para>
</listitem>

<listitem>
<para>Synchronize</para>
<para>When connected to the simond, this option will be available.</para>
<para>simon creates the speech input files which are then compiled and used by the simond server (see the <link linkend="architecture">section architecture for more details</link>).</para>
<para>The process of sending the speech input files, compiling them and receiving the compiled versions is called "synchronization". By default, simon will initiate a synchronization immidiatly after the connection has been established and whenever the model changes (please see the <link linkend="configure_synchronization">configure synchronization section</link> for information on how to change that).</para>
<para>Using this menu option the synchronization can be triggered manually at any time.</para>
</listitem>

</itemizedlist>
</para>

<para>
The simon main window can be hidden at any time by clicking on the simon logo in the system tray (usually next to the system clock in the task bar) which will minimize simon to the tray. Click it again to show the main window again.</para>

</sect1>

<sect1 id="wordlist">
<title>Wordlist</title>
<para>The wordlist lets the user manage the vocabulary.</para>

<sect2 id="wordlist_theory">
<title>General</title>
<para>
The vocabulary defines what words the recognition process should recognize. Every word you want to be able to use with simon should be contained in your vocabulary.
</para>
<para>
One entry in the vocabulary defines exactly one "word". In contrast to the common use of the word "word", in simon "word" means one unique combination of the following:
<itemizedlist>
  <listitem><para>Wordname</para><para>(The written word itself)</para></listitem>
  <listitem><para>Terminal</para><para>(Grammatical category; For example: "Noun", "Verb", etc.)</para></listitem>
  <listitem><para>Pronunciation</para><para>(How the word is pronounced; simon accepts any kind of phonetic as long as it does not use special characters or numbers)</para></listitem>
</itemizedlist>

That means that plurals or even different cases are different "words" to simon.
This is an important design decicion to allow more control when using a sophisticated grammar.
</para>

<para>
In general, it is advisable to keep your vocabulary as sleek as possible. The more words, the higher the chance that simon might misunderstand you.
</para>

<para>
Example vocabulary (please note that the terminals here are deliberately set to Noun / Verb to help the understanding; Please to refer to the <link linkend="grammar">grammar section</link> why this might not be the best idea):
<table frame='all'><title>Sample Vocabulary</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>
<colspec colname='c1'/>
<colspec colname='c2'/>
<colspec colname='c3'/>
<thead>
<row>
  <entry>Word</entry>
  <entry>Terminal</entry>
  <entry>Pronunciation</entry>
</row>
</thead>
<tbody>
<row>
  <entry>Computer</entry>
  <entry>Noun</entry>
  <entry>k ax m p y uw t er</entry>
</row>
<row>
  <entry>Internet</entry>
  <entry>Noun</entry>
  <entry>ih n t er n eh t</entry>
</row>
<row>
  <entry>Mail</entry>
  <entry>Noun</entry>
  <entry>m ey l</entry>
</row>
<row>
  <entry>close</entry>
  <entry>Verb</entry>
  <entry>k l ow s</entry>
</row>
</tbody>
</tgroup>
</table>
</para>

<sect3 id="active_dictionary">
<title>Active Dictionary</title>
<para>The vocabulary used for the recognition is referred to as active dictionary or active vocabulary.</para>
</sect3>

<sect3 id="shadow_dictionary">
<title>Shadow Dictionary</title>
<para>
As said above, the user should keep his vocabulary / dictionary as lean as possible. However, as a word in your vocabulary has to also have information about it's pronunciation, it would also be good to have large dictionary where you could look up the pronunciation and other characteristics of the words.
</para>
<para>
simon provides this functionality. We refer to this large reference dictionary as "shadow dictionary". This shadow dictionary is not created by the user but can be imported from various sources.
</para>
<para>
As simon is a multi-language solution we do not ship shadow dictionaries with simon. However, it is very easy to import them yourself using the import dictionary wizard. This is described in the <link linkend="import_dictionary">Import Dictionary section</link>.
</para>
</sect3>
</sect2>



<sect2>
<title>Maintaining the Wordlist</title>
<para>
simon provides a "Wordlist" menu which lists the current vocabulary.

<screenshot>
<screeninfo>simons Wordlist</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="wordlist.png"   format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>Per default, only the active vocabulary is shown. Only after you tick the "Include unused Words from the Shadow Lexicon" checkbox the shadow lexicon is also shown.</para>

<para>
Every word states it "recognition rate" which at the moment is just a counter of how often the word has been recorded (alone or together with other words).
</para>
<para>
When this number is only one or zero the word entry is colored red (1: light red; 0: dark red). This is a visual warning. When a word contains a phoneme combination that is not covered by any other word and the word with this unusual phoneme combination is never recorded (recognition rate = 0), the model <emphasis>will</emphasis> fail to compile. However, simon will display an appropriate error message when the compilation of the model fails because of such an issue. In general it is a good idea to record each word at least once or twice (at best when <link linkend="add_word_record">adding the word</link>) to avoid such problems.
</para>
<para>Because the shadow dictionary is not used for the recognition there are of course no trainings-samples for words in the shadow dictionary. So don't be alarmed if all the entries in the shadow dictionary are colored dark red - this is perfectly normal.

<screenshot>
<screeninfo>Shadow Wordlist</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="wordlist1.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>


</para>

</sect2>


<sect2 id="add_word">
<title>Adding Words</title>
<para>To add new words to the active vocabulary, use the add word wizard.</para>
<para>Adding words to simon is basically a two step procedure:
<itemizedlist>
<listitem><para>Defining the word</para></listitem>
<listitem><para>Initial training</para></listitem>
</itemizedlist>
</para>

<sect3 id="add_word_define">
<title>Defining the Word</title>
<para>
Firstly, the user is asked which word he wants to add.

<screenshot>
<screeninfo>Select the word to add</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="add_word_1.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>
When the user proceeds to the next page, simon automatically tries to find as much information about the word in the <link linkend="shadow_dictionary">shadow dictionary</link> as possible.
</para>

<para>
If the word is listed in the shadow dictionary, simon automatically fills out all the needed fields (Terminal and Pronunciation).

<screenshot>
<screeninfo>Fields automatically filled out by the Shadow Dictionary</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="add_word_2.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>
<para> All suggestions from the shadow dictionary are listed in the table "Similar words". Per default only exact word matches are shown. However, this can be changed by checking the "Also show non-perfect matches" checkbox below the suggestion table. Using similar words you can quickly deduce the correct pronunciation of the word you are actually trying to add. See <link linkend="manual_transcription">below</link> for details.</para>

<para>
Of course this really depends on your shadow dictionary. If the shadow dictionary does not contain the word you are trying to add, the required fields have to be filled out manually.</para>

<para>
Some dictionaries that can be imported with simon (SPHINX, HTK) do not differentiate between upper and lower case. Suggestions based on those dictionaries will always be uppercase. You are of course free to change these suggestions to the correct case.
</para>

<para>Some dictionaries that can be imported with simon (SPHINX, PLS and HTK) provide no grammatical information at all. These will assign all the words to the terminal "Unknown". You should change this to something appropriate when adding those words.
</para>

<sect4>
<title>Manually Selecting a Terminal</title>
<para>
The terminal of the word is defined as the grammatical category the word belongs to. This might be "Noun", "Verb" or completely new categories like "Command". For more information see the <link linkend="grammar">grammar section</link>.</para>
<para>
The list contains all terminals used in both your active and your shadow lexicon and in your grammar.
</para>
<para>
You can add new terminals to the drop-down menu by using the green plus sign next to it.
</para>
</sect4>

<sect4 id="manual_transcription">
<title>Manually Providing the Phonetic Transcription</title>
<para>
The pronunciation is a bit trickier. simon does not need a certain type of phonetics so you are free to use any method as long as it uses only ASCII characters and no numbers. However, if you want to use a shadow dictionary and want to use it to it's full potential you should use the same phonetics as the shadow dictionary.
</para>

<para>
If you don't know how to transcribe a word yourself you can easily use your shadow dictionary to help you with the transcription - even if the word is not listed in it. Let's say we want to add the word "Firefox" (to launch firefox) which is of course not listed in our shadow dictionary.
</para>

<para>
(I imported the English voxforge HTK lexicon available from <ulink url="http://voxforge.org/home/downloads">voxforge</ulink> as a shadow dictionary.)
</para>

<para>
"Firefox" is not listed in our shadow dictionary so we don't get any suggestion at all.
<screenshot>
<screeninfo>Adding an unknown word</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="add_word_2_2.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>
However, we know that firefox sounds like "fire" and "fox" put together. So let's just open the wordlist (you can keep the wizard open) by selecting "Wordlist" from your simon main toolbar.
</para>
<para>
Check the "Include unused words from the shadow lexicon" checkbox beneath the list and simon will display both active and shadow dictionary.
</para>
<para>
Use the "Filter"-Box above the list to search for "Fire":

<screenshot>
<screeninfo>Adding an unknown word: Search for the Pronunciation</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="add_word_2_3.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>
We can see, that the word "Fire" is transcribed as "f ay r". Now filter for "fox" instead of "Fire" and we can see that "Fox" is transcribed as "f ao k s". We can assume, that firefox should be transcribed as "f ay r f ao k s".
</para>

<para>
Using this approach of deducing the pronunciation from parts of the word has the distinct advantage that we not only get a high quality transcription but also automatically use the same phoneme set as the other words which were correctly pulled out of the shadow dictionary.
</para>

<para>
We can now enter the pronunciation and change the terminal to something appropriate.
<screenshot>
<screeninfo>Completely defined word</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="add_word_2_4.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

</sect4>

</sect3>

<sect3 id="add_word_record">
<title>Training the Word</title>
<para>
To complete the wizard we need to train the word twice. (Note: If you are really sure what you are doing you can skip this)
</para>
<para>
simon will try to prompt you for real-world examples. To do that, simon will automatically fetch grammar structures using the terminal of the word and substitute the generic terminals with example words from your active lexicon.
</para>
<para>
For example: You have the grammar structure "Trigger Command" and have the word "Computer" of the terminal "Trigger" in your wordlist. You then add a new word "Firefox" of the terminal "Command". simon will now automatically prompt you for "Computer Firefox" as it is - according to your grammar - a valid sentence.
</para>
<para>
If simon is unable to find appropriate sentences using the word (i.e.: No grammar, not enough words in your active lexicon, etc.) it will just prompt you for the word alone.
</para>
<para>
Altough simon ensures that the automatically generated examples are valid, you can always override it's suggestion. Just switch to the "Examples" tab on the "Define Word" page.
<screenshot>
<screeninfo>Editing word examples</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="add_word_3.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>
You are free to change those examples to anything you like. You can even go so far and use words that are not yet in your active lexicon as long as you add them before you synchronize the model, altough this is not recommended.
</para>

<para>
All that is left is to record the examples.
<screenshot>
<screeninfo>Recording</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="add_word_4.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>
<para>Make sure you follow the guidelines listed in the <link linkend="recording">recording section</link>.</para>
</sect3>

</sect2>


<sect2 id="remove_word">
<title>Removing a word</title>

<para>To remove a word from your language model, select it in the wordlist view and click on "Remove selected word".

<screenshot>
<screeninfo>Recording</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="delete_word.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot></para>

<para>
As you can see, the dialog offers two choices:
<itemizedlist>
  <listitem>
    <para>Move the word to the shadow lexicon</para>
    <para>This will remove the selected word from the active lexicon (and thus from the recognition) but will keep a copy in the shadow vocabulary. All the recordings containing the word will still be lost.</para>
  </listitem>
  <listitem><para>Remove the word completely</para>
    <para>Just remove the word. All the recordings containing the word will of course be removed too.</para></listitem>
</itemizedlist>
</para>

</sect2>

<sect2 id="special_training_stub">
<title>Special Training</title>
<para>Please see the <link linkend="special_training">special training section in the training section</link>.</para>
</sect2>



<sect2 id="import_dictionary">
<title>Importing a Dictionary</title>
<para>
simon provides the functionality to import large dictionaries as a reference. This reference dictionary is called <link linkend="shadow_dictionary">shadow dictionary</link>.
</para>
<para>
When the user <link linkend="add_word">adds a new word</link> to the model, he has to define the following characteristics to define this word:
<itemizedlist>
  <listitem><para>Wordname</para></listitem>
  <listitem><para>Terminal</para></listitem>
  <listitem><para>Phonetic definition</para></listitem>
</itemizedlist>
</para>
<para>
These characteristics are taken out of the shadow dictionary if it contains the word in question. A large, high quality shadow dictionary can thus help the user to easily add new words to the model without keeping track of the phoneme set or - in many cases - even let him forget a the phonetic transcription is needed at all.
</para>

<para>
simon is able to import four different types of dictionaries:
<itemizedlist>
  <listitem><para>HADIFIX</para></listitem>
  <listitem><para>HTK</para></listitem>
  <listitem><para>PLS</para></listitem>
  <listitem><para>SPHINX</para></listitem>
</itemizedlist>
</para>


<sect3 id="import_dict_hadifix">
<title>HADIFIX Dictionary</title>
<para>
simon can import HADIFIX dictionaries.
</para>
<para>
One example of a HADIFIX dictionary is the German <ulink url="http://www.ifk.uni-bonn.de/forschung/abteilung-sprache-und-kommunikation/phonetik/sprachsynthese/bomp/bomp-1">HADIFIX BOMP</ulink>.
</para>
<para>
Hadifix dictionaries provide both terminals and pronunciation.
</para>
</sect3>

<sect3 id="import_dict_htk">
<title>HTK Dictionary</title>
<para>
simon can import HTK lexica.
</para>
<para>
One example of a HTK lexicon is the English <ulink url="http://www.repository.voxforge1.org/downloads/SpeechCorpus/Trunk/Lexicon/">Voxforge dictionary</ulink>.
</para>
<para>
Hadifix dictionaries provide pronunciation information but no terminals. All words will be assigned to the terminal "Unknown".
</para>
</sect3>

<sect3 id="import_dict_pls">
<title>PLS Dictionary</title>
<para>
simon can import PLS dictionaries.
</para>
<para>
One example of a PLS dictionary is the <ulink url="http://www.repository.voxforge1.org/downloads/de/Trunk/Lexicon/">German GPL dictionary from Voxforge</ulink>.
</para>
<para>
PLS dictionaries provide pronunciation information but no terminals. All words will be assigned to the terminal "Unknown".
</para>
</sect3>

<sect3 id="import_dict_sphinx">
<title>SPHINX Dictionary</title>
<para>
simon can import SPHINX dictionaries.
</para>
<para>
One example of a SPHINX dictionary is this <ulink url="http://speech.mty.itesm.mx/~jnolazco/proyectos.htm">dictionary for Mexican Spanish</ulink>.
</para>
<para>
SPHINX dictionaries provide pronunciation information but no terminals. All words will be assigned to the terminal "Unknown".
</para>
</sect3>

</sect2> <!-- End Import Dict -->

</sect1> <!-- End Wordlist -->


<sect1 id="grammar">
<title>Grammar</title>
<para>
The grammar defines which combinations of words are correct.
</para>

<sect2 id="grammar_general">
<title>General</title>
<para>
Let's look at an example: You want to use simon to launch programs and close those windows when you are done. You would like to use the following commands:
<itemizedlist>
  <listitem><para>"Computer, Internet" to open a browser</para></listitem>
  <listitem><para>"Computer, Mail"</para><para>To open a mail client</para></listitem>
  <listitem><para>"Computer, close"</para><para>To close the current window</para></listitem>
</itemizedlist>
</para>
<para>
Following english grammar, your vocabulary would contain the following:

<table frame='all'><title>Sample Vocabulary</title>
<tgroup cols='2' align='left' colsep='1' rowsep='1'>
<colspec colname='c1'/>
<colspec colname='c2'/>
<thead>
<row>
  <entry>Word</entry>
  <entry>Terminal</entry>
</row>
</thead>
<tbody>
<row>
  <entry>Computer</entry>
  <entry>Noun</entry>
</row>
<row>
  <entry>Internet</entry>
  <entry>Noun</entry>
</row>
<row>
  <entry>Mail</entry>
  <entry>Noun</entry>
</row>
<row>
  <entry>close</entry>
  <entry>Verb</entry>
</row>
</tbody>
</tgroup>
</table>
</para>

<para>
To allow the sentences defined above simon would need the following grammar:
<itemizedlist>
  <listitem><para>"Noun Noun" for sentences like "Computer Internet"</para></listitem>
  <listitem><para>"Noun Verb" for sentences like "Computer close"</para></listitem>
</itemizedlist>
</para>
<para>
While this would work, it would also allow the combinations "Computer Computer", "Internet Computer", "Internet Internet", etc. which are obviously bogus.
To improve the recognition accuracy, we can try to create a grammar that better reflects what we are trying to do with simon.
</para>

<para>
It is important to remember that you define your own "language" when using simon. That means that you are not bound to grammar rules that exist in whatever language you want to use simon with. For a simple command and control use-case it would for example be advisable to invent new grammatical rules to eliminate the differences between different commands imposed by grammatical information not relevant for this use case.
</para>

<para>
In the example above it is for example not relevant that "close" is a verb or that "Computer" and "Internet" are nouns. Instead, why not define them as something that better reflects what we want them to be:

<table frame='all'><title>Improved Sample Vocabulary</title>
<tgroup cols='2' align='left' colsep='1' rowsep='1'>
<colspec colname='c1'/>
<colspec colname='c2'/>
<thead>
<row>
  <entry>Word</entry>
  <entry>Terminal</entry>
</row>
</thead>
<tbody>
<row>
  <entry>Computer</entry>
  <entry>Trigger</entry>
</row>
<row>
  <entry>Internet</entry>
  <entry>Command</entry>
</row>
<row>
  <entry>Mail</entry>
  <entry>Command</entry>
</row>
<row>
  <entry>close</entry>
  <entry>Command</entry>
</row>
</tbody>
</tgroup>
</table>
</para>

<para>
Now we change the grammar to the following:
<itemizedlist>
  <listitem><para>"Trigger Command"</para></listitem>
</itemizedlist>

This allows all the combinations described above. However, it also limits the possibilities to exactly those three sentences. Especially in larger models a well thought grammar and vocabulary can mean a huge difference in recognition results.
</para>
</sect2>

<sect2>
<title>Defining your Grammar</title>
<para> 
simon provides an easy to use text based interface to change the grammar. You can simply list all the allowed sentences (without any punctuation marks, obviously) like described above.

<screenshot>
<screeninfo>Grammar</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="grammar.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>
</sect2>

<sect2>
<title>Import a Grammar</title>
<para>Additionally to simply entering your desired grammar sentence by sentence, simon is able to automatically deduce allowed grammar structures by reading plaintext using the Import Grammar wizard.


<screenshot>
<screeninfo>Import Grammar</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="import_grammar.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>Say we have a vocabulary like in the general section above: 

<table frame='all'><title>Improved Sample Vocabulary</title>
<tgroup cols='2' align='left' colsep='1' rowsep='1'>
<colspec colname='c1'/>
<colspec colname='c2'/>
<thead>
<row>
  <entry>Word</entry>
  <entry>Terminal</entry>
</row>
</thead>
<tbody>
<row>
  <entry>Computer</entry>
  <entry>Trigger</entry>
</row>
<row>
  <entry>Internet</entry>
  <entry>Command</entry>
</row>
<row>
  <entry>Mail</entry>
  <entry>Command</entry>
</row>
<row>
  <entry>close</entry>
  <entry>Command</entry>
</row>
</tbody>
</tgroup>
</table></para>

<para>We want simon to recognize the sentence "Computer Internet!". So we create a simple text file with this content "Computer Internet!" (any punctuation mark would work) and save it as "simongrammar.txt".

<screenshot>
<screeninfo>Import Grammar: Text</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="import_grammar2.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>

<screenshot>
<screeninfo>Import Grammar: Select files</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="import_grammar1.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>simon will then read all the given text files (in this case the only given text file is "simongrammar.txt") and look up every single word in both active and shadow dictionary (the definition in the active dictionary has more importance if the word is available in both). It will then replace the word with its terminal.</para>
<para>In our example this would mean that he would find the sentence "Computer Internet". simon would find out that "Computer" is of the terminal "Trigger" and "Internet" of the terminal "Command". Because of this simon would "learn" that "Trigger Command" is a valid sentence and add it to its grammar.</para>
<para>The import automatically segments the input text files by punctuation marks (".", " - ", "!", etc.) so any natural text should work. The importer will automatically merge duplicate sentence structures (even accross different files) and add multiple sentence (all possible combinations) when a word has multiple terminals assigned to it.</para>
<para>The import will ignore sentences where one or more words could not be found in the language model unless you tick the "Also import unknown sentences" checkbox in which case those words are replaced with "Unknown".</para> 

</sect2>





<sect2>
<title>Renaming Terminals</title>
<para>The rename terminal wizard allows you to rename terminals in both your active vocabulary, your shadow dictionary and the grammar.

<screenshot>
<screeninfo>Rename Terminal</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="rename_terminal.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>
</sect2>

<sect2>
<title>Merging Terminals</title>
<para>The merge terminal wizard allows you to merge two terminals into one new terminal in both your active vocabulary, your shadow dictionary and the grammar.

<screenshot>
<screeninfo>Merge Terminal</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="merge_terminal.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>
<para>This functionality is especially useful if you want to simplify your grammar structures.</para>
</sect2>


</sect1>



<sect1 id="training">
<title>Training</title>

<para>Using the Training-module, you can improve your <link linkend="acoustic_model">acoustic model</link>. </para>

<para>
The interface lists all installed trainings-texts in a table consisting of three columns:
<itemizedlist>
<listitem><para>Name</para><para>A descriptive name for the text.</para></listitem>
<listitem><para>Pages</para><para>The number of "pages" the text consists of. Each page represents one recording.</para></listitem>
<listitem><para>Recognition Rate</para><para>Analogue to the wordlist; Represents how likely simon will recognize the words (higher is better). The recognition rate of the trainings-text is the average recognition rate of all the words in the text.</para></listitem>
</itemizedlist>

<screenshot>
<screeninfo>Training</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="training.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>
To improve the acoustic model - and thus the recognition rate - you have to record trainings-texts. This means that simon gets essentially two needed parts: 

<itemizedlist>
  <listitem><para>Samples of your speech</para></listitem>
  <listitem><para>Transcriptions of those samples</para></listitem>
</itemizedlist>

The active dictionary is used to transcribe the words (mapping them from the actual word to its phonetic transcription) that make up the text so every word contained in the trainings-text you want to read (train) has to be contained in your active dictionary. simon will warn you if this is not the case and provide you with the possibility to add all the missing words in one go.

<screenshot>
<screeninfo>Training: Warning about missing words</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="training_warning.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>

The procedure is the same as if you would <link linkend="add_word">add a single word</link> but the wizard will prompt you for details and recordings for all the missing words automatically. This procedure can be aborted at any time and simon will provide both a way to add the already completely defined words and to undo all changes done so far. When the user has added all the words he is prompted for (all the words missing) the changes to the active dictionary / vocabulary are saved and the training of the previously selected text starts automatically.
</para>

<para>
The training (reading) of the trainings-text works exactly the same as the intial training when adding a new word.</para>

<para>Make sure you follow the guidelines listed in the <link linkend="recording">recording section</link>.</para>
<para>
<screenshot>
<screeninfo>Training in progress</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="training_running.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>



<sect2 id="training_storage">
<title>Storage Directories</title>
<para>
Trainings-texts are stored at two different locations:
<itemizedlist>
  <listitem><para>Linux: <filename>~/.kde/share/apps/simon/texts</filename></para>
            <para>Windows: <filename>%appdata%\.kde\share\apps\simon\texts</filename></para>
          <para>The texts of the current user. Can be deleted and added with simon (see below).</para></listitem>
  <listitem><para>Linux: <filename>`kde4-config --prefix`/share/apps/simon/texts</filename></para>
            <para>Windows: <filename>(install directory)\share\apps\simon\texts</filename></para>
          <para>System wide texts. They will appear on every user account using simon on this machine and can not be deleted from within simon because of the obvious permission restrictions on system wide files.</para>
          <para>This folder can be used by system administrators to provide a common set of trainings-texts for all the users on one system.</para>
          </listitem>
</itemizedlist>
</para>
<para>The XML files (one for each text) can just be moved from one location to the other but this will most likely require admin privileges.</para>
</sect2>


<sect2 id="import_texts">
<title>Importing Texts</title>
<para>
<screenshot>
<screeninfo>Import-trainings-texts-wizard</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="import_text_1.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>

The import texts wizard provides a simple way to add new trainings-texts to simon.
</para>

<para>
simon supports two different sources for new trainings-texts:

<itemizedlist>
  <listitem><para>Local text files</para>
          <para>simon can import normal text files to use them as trainings-texts.</para></listitem>
  <listitem><para>Remote list of texts</para>
            <para>The other option is to load a pre-segmented text from an online repository.</para>
          </listitem>
</itemizedlist>

<screenshot>
<screeninfo>Import-trainings-texts-wizard: Select source</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="import_text_2.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>


<sect3 id="import_texts_local">
<title>Local Text Files</title>

<para>When importing text files, simon will automatically try to recognize individual sentences and split the text into appropriate "pages" (recordings). The algorithm treats text between "normal" punctation (".", "!", "?", "...", """,...) and line breaks as "sentences". Each "sentence" will be on its own page.

<screenshot>
<screeninfo>Import-trainings-texts-wizard: Local text files</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="import_text_3.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

</sect3>

<sect3 id="import_texts_remote">
<title>Texts from the Online Repository</title>

<para>When downloading text from and online repository, simon will first download a list of available texts from a specific URL. This URL defaults to a test repository on a server controlled by the official simon team but can easily be changed in the simon configuration (<guimenu>Settings</guimenu> > <guimenuitem>Configure simon</guimenuitem> > <guimenuitem>Modell Extensions</guimenuitem>).</para>

<para>Currently, there are only a few examples available, but users are very welcome to send us their most useful trainings-texts per mail.</para>
<para>To do that, just send the xml file (to be found in your <link linkend="training_storage">local storage directory</link>) to <ulink url="mailto:support@simon-listens.org">support@simon-listens.org</ulink> and we will add your text to the online repository. Please keep in mind that books or other copyrighted source material can not be accepted.</para>


<para>
<screenshot>
<screeninfo>Import-trainings-texts-wizard: Remote import</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="import_text_4.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>To download a text just select it and click on Next. It will be automatically added to your local repository.</para>

</sect3>
</sect2>

<sect2 id="special_training">
<title>On The Fly Training</title>
<para>Additionally to trainings-texts, simon also allows to train individual words or word combinations from your dictionary on-the-fly.</para>

<para>This feature is located in the wordlist-menu of simon.</para>

<para>
<screenshot>
<screeninfo>Special Training: Selecting the Words</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="special_training.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>Select the words to train from the wordlist on the left and simply drag them to the selection list to the right (you could also select them in the table on the left and add them by clicking "Add to Training".</para>

<para>Start the training by selecting "Train selected words". The training itself is exactly the same as if it were a pre-composed trainings-text.</para>

<para>
<screenshot>
<screeninfo>Special Training: Training the Words</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="special_training_2.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>If there are more than 9 words to train simon will automatically split the text evenly across multiple pages.</para>

<para>Of course you are free to add words from the shadow lexicon to the list of words to train but simon will prompt you to add the words before the training starts just like he would if you would train a text that contains unknown words (see above).</para>
</sect2>

<sect2 id="import_trainings-data">
<title>Importing Trainings-data</title>
<para> 
Using the import trainings-data field one can import previously gathered trainings-samples from previous simon versions without copying the whole dictionary.</para>

<para>
This feature is very specific. Please use it with caution and make sure that you know exactly what you are doing before you continue.
</para>

<para>
This wizard will extract the trancription of the given files from their <emphasis>filenames</emphasis>. A file called this_is_a_test.wav <emphasis>must</emphasis> contain "This is a test" and nothing else. Numbers and special charecters (".", "-",...) in the filename are ignored and stripped.
</para>

<para>
The files and their transcription are then added to the trainings corpus.
</para>

<para>Files recorded by simon 0.2 <emphasis>will</emphasis> follow this naming scheme so you can safely import them. Files generated by previous simon versions should not be imported using this function (they name the special trainings "Spezialtraining_..." and not according to their contents - you can rename or remove those files if you still want to use this wizard with those files).</para>


<para>
To import a directory containing trainings-samples just select the folder to import.

<screenshot>
<screeninfo>Import-trainings-data-wizard</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="import_training_data_1.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>
The folder will then be scanned recursively. This means that the given folder and all its subfolders will be searched for .wav files. All files found will be imported.
</para>

<para>
When importing the sound files, all configured <link linkend="soundconfiguration_postprocessing">post processing filters</link> are applied.
</para>

</sect2>

</sect1>


<sect1 id="commands">
<title>Commands</title>
<para>When simon is active and recognizes something, the recognition result is given to the loaded command plug-ins (in order) for processing.</para>

<para>
<screenshot>
<screeninfo>simons Command Dialog</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="command_main.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>The command system can be compared with a group of factory workers. Each one of them knows how to perform one task (e.g. "Karl" knows how to start a program and "Joe" knows how to open a folder, etc.). Whenever simon recognizes something it is given to "Karl" who then checks if this instruction is meant for him. If he doesn't know what to do with it, it is handed over to "Joe" and so on. If none of the loaded plugins know how to process the input it is ignored. The order in which the recognition result is given to the individual commands (people) is configurable in the command options (<guimenu>Settings</guimenu> > <guimenuitem>Configure simon</guimenuitem> > <guimenuitem>Actions</guimenuitem>).</para>


<screenshot>
<screeninfo>simons Action Configuration</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure_actions_1.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>

<para>
Each plugin can be associated with a "trigger". Usings triggers, the responsibility of each plugin can be easily be divided.
</para>
<para>Using the factory workers abstraction from above it could be compared to stating the name of who you mean to process your request. So instead of "Open my home folder" you say "Joe, open my home folder" and "Joe" (the plugin responsible for opening folders) will instantly know that the request is meant for him.</para>
<para>In practice you could have commands like the executable command "Firefox" to open the popular browser and the place command "Google" to open the web search engine. If you assign the trigger "Start" to the executable plugin and the trigger "Open" to the place command you would have to say "Start Firefox" (instead of just "Firefox" if you don't use a trigger for the executable plugin) and "Open Google" to open the search engine (instead of just "Google").</para>
<para>Triggers are of course no requirement and you can easily use simon without defining any triggers (altough many plugins come with a default trigger of "Computer" set which you would have to remove). But even if you use just on trigger for all your commands (like "Computer" to say "Computer, Firefox" and "Computer, Google" like) it has the advantage of greatly limiting the false-positives.</para>

<para>
Each Command has a name (which will trigger its invokation), an icon and more fields depending on the type of the plugin (see below).
</para>


<sect2 id="executable_commands">
<title>Executable Commands</title>

<para>Executable commands are accociated with an executable file ("Program") which is started when the command is invoked.</para>

<screenshot>
<screeninfo>Executable Commands</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="command_program.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>

<para>Arguments to the commands are supported. If either path to the executable or the parameters contain spaces they <emphasis>must</emphasis> be wrapped in quotes.</para>

<para>Given the executable file <filename>C:\Programme\Mozilla Firefox\firefox.exe</filename> the local html file <filename>C:\test file.html</filename> the correct line for the "Executable" would be: <filename>"C:\Programme\Mozilla Firefox\firefox.exe" "C:\test file.html"</filename>.</para>

<para>The working directory defines where the process should be launched from. Given the working directory <filename>C:\folder</filename>, the command <filename>"C:\Programme\Mozilla Firefox\firefox.exe" file.html</filename> would cause firefox to search for the file <filename>C:\folder\file.html</filename>.</para>

<para>The working directory does not normally need to be set and can be left blank most of the time.</para>

<sect3 id="importing_executable_commands">
<title>Importing Programs</title>
<para>For even easier configuration simon provides an import wizard which allows you to select programs directly from the KDE menu.</para>

<screenshot>
<screeninfo>Import Programs</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="command_program_import_1.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>

<para>The wizard will list all programs that have an entry in your KDE menu in their respective category.</para>

<para>Sub-Categories are not supported and are thus listed on the same level as top-level categories.</para>

<para>Just select the program you wish to start with simon and complete the wizard. The correct values for the executable and the working directory will automatically be filled out for you.</para>

</sect3>

</sect2>

<sect2 id="place_commands">
<title>Place Commands</title>
<para>With place commands you can allow simo to open any given URL. Because simon just hands the address over to the plattforms URL handler, special Protocols like "remote:/" (on Linux/KDE) or even KDEs "Web-Shortcuts" are supported.</para>
<para>Instead of folders, files can also be set as the commands URL which will cause the file to be opened with the application which is associated with it when the command is invoked.</para>

<screenshot>
<screeninfo>Places</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="command_place.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>

<para>To associate a specific URL with the command you can manually enter it in the URL field (select "Manual" first) or import it with the import place wizard.</para>


<sect3 id="importing_place_commands">
<title>Importing Places</title>

<para>The import place wizard allows you to easily create the correct URL for the command.</para>

<para>To add a local folder, select "Local Place" and choose the folder or file with the file selector.

<screenshot>
<screeninfo>Import Places: Local</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="command_place_import_1.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>To add a remote URL (HTTP, FTP, etc.) choose "Remote URL".

<screenshot>
<screeninfo>Import Places: Remote</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="command_place_import_2.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>

Please note that for URLs with authentication information the password will be stored in clear text.</para>

</sect3>
</sect2>

<sect2 id="shortcut_commands">
<title>Shortcut Commands</title>
<para>Using shortcut commands the user can associate commands with key-combinations.</para>

<para>The command will simulate keyboard input to "press" shortcuts like "Ctrl+C" or "Alt+F4".

<screenshot>
<screeninfo>Defining Shortcut Commands</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="command_shortcut.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>To select the shortcut you wish to simulate just toggle the shortcut button and press the keycombination on your keyboard.</para>
<para>simon will capture the shortcut and associate it with the command.</para>
<para>Due to technical limitations there are several shortcuts on Microsoft Windows that can not be captured by simon (this includes e.g. Ctrl+Alt+Del and Alt+F4). These special shortcuts can be selected from a list below the aforementioned shortcut button. (Note: This selection box is not visible in the screenshot above as the list is only displayed in the Microsoft Windows version of simon.)</para>
</sect2>

<sect2 id="text_macro_commands">
<title>Text-Macro Commands</title>
<para>Using text-macro commands, the user can associate text with a command. When the command is invoked, the associated text will be "written" by simulating keystrokes.</para>

<para>
<screenshot>
<screeninfo>Defining Text-Macro Commands</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="command_text-macro.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>
</sect2>

<sect2 id="list_command">
<title>List Commands</title>
<para>The list command is designed to combine multiple commands (all types of commands are supported) into one list. The user can then select the n-th entry by saying the associated number (1-9).</para>

<para>This is very useful to limit the amount of training required and provides the possibility to keep the vocabulary to a minimum.</para>


<para>
<screenshot>
<screeninfo>Defining List Commands</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="command_list_1.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>List commands are especially useful when using commands with difficult triggers or commands that can be grouped under a general theme. A typical example would be a command "Startmenu" to present a list of programs to launch. That way the specific executable commands can still retain very descriptive names (like "OpenOffice.org Writer 3.1") without the user having to include these words in his vocabulary and consider them in the grammar just to trigger them.</para>

<para>Commands of different types can of course be mixed.</para>


<para>
When invoked, the command will display the list centered on the screen. The list will automatically expand to accompany its items.
<screenshot>
<screeninfo>Defining List Commands</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="command_list_2.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
The user can invoke the commands contained in the list by simply saying their associated number (In this example: "One" to launch Mozilla Firefox).
</para>

<para>
While a list command is active (displayed), all input that is not directed at the list itself (other commands, etc.) will be rejected. The process can be canceled by pressing the "Cancel" button or by saying "Cancel".</para>

<para>
If there are more than 9 items simon will add "Next" and "Back" options to the list ("Zero" will be associated with "Back" and "Nine" with "Next").

<screenshot>
<screeninfo>List Command with many entries</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="command_list_3.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>
To use list commands to their full potential, make sure that your language and acoustic model contains and allows for the following "sentences":
<itemizedlist>
<listitem><para>"Zero"</para></listitem>
<listitem><para>"One"</para></listitem>
<listitem><para>"Two"</para></listitem>
<listitem><para>"Three"</para></listitem>
<listitem><para>"Four"</para></listitem>
<listitem><para>"Five"</para></listitem>
<listitem><para>"Six"</para></listitem>
<listitem><para>"Seven"</para></listitem>
<listitem><para>"Eight"</para></listitem>
<listitem><para>"Nine"</para></listitem>
<listitem><para>"Cancel"</para></listitem>
</itemizedlist>
</para>

</sect2>

<sect2 id="composite_commands">
<title>Composite Commands</title>
<para>Composite commands allow the user to group multiple commands into a sequence.</para>

<para>When invoked the commands will be executed in order. Delays between commands can be inserted.

<screenshot>
<screeninfo>Defining Composite Commands</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="command_composite_1.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>
Using the composite command the user can compose complex "macros". The screenshot above - for example - does the following:
<itemizedlist>
<listitem><para>Start Kopete (Executable Command)</para></listitem>
<listitem><para>Wait 2000ms for Kopete do be started</para></listitem>
<listitem><para>Type "Mathias" (Text-Macro Command) which will select Mathias in my contact list</para></listitem>
<listitem><para>Press Enter (Shortcut Command)</para></listitem>
<listitem><para>Wait 1000ms for the chat window to appear</para></listitem>
<listitem><para>Write "Hi!" (Text-Macro Command); The text associated to this command contains a newline at the end so that the message will be send.</para></listitem>
<listitem><para>Press Alt+F4 (Shortcut Command) to close the chat window</para></listitem>
<listitem><para>Press Alt+F4 (Shortcut Command) to close the kopete main window</para></listitem>
</itemizedlist>
</para>

</sect2>

<sect2 id="desktopgrid">
<title>Desktopgrid</title>
<para>The desktopgrid allows the user to control his mouse with his voice.</para>

<para>
<screenshot>
<screeninfo>The Desktopgrid</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="command_desktopgrid.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
The desktopgrid divides the screen into nine parts which are numbered from 1-9. Saying one of these numbers will again divide the selected field into 9 fields again numbered from 1-9, etc. This is repeated 3 times. After the fourth time the desktopgrid will be closed and simon will click in the middle of the selected area.</para>

<para>
While the desktopgrid is active (displayed), all input that is not directed at the desktopgrid itself (other commands, etc.) will be rejected. Say "Cancel" at any time to abort the process.
</para>

<para>As there can no command instances be created of this plugin it is not listed in the "New Command" dialog. However, the desktopgrid plugin registers a configuration screen right in the command configuration when it is loaded.</para>

<para>
<screenshot>
<screeninfo>Configuring the Desktopgrid</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="desktopgrid_configure.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
The trigger that invokes the desktopgrid is of course completely configurable. Moreover the user can use "real" or "fake" transparency. If your graphical environment allows for compositing effects ("desktop effects") then you can safely use "real" transparency which will make the desktogrid transparent. If your plattform does not support compositing simon will simulate transparency by taking a screenshot of the screen before displaying the desktopgrid and display that picture behind the desktopgrid.
</para>

<para>If the desktopgrid is configured to use real transparency and the system does not support compositing it will display a solid gray background.</para>

<para>
However, nearly all up-to-date systems will support compositing (real transparency).
</para>
<para>This includes:
<itemizedlist>
<listitem><para>Microsoft Windows 2000 or higher (XP, Vista, 7)</para></listitem>
<listitem><para>GNU/Linux using a composite manager like Compiz, KWin4, xcompmgr, etc.</para></listitem>
</itemizedlist>
</para>


<para>
To use the desktopgrid, make sure that your language and acoustic model contains and allows for the following "sentences":
<itemizedlist>
<listitem><para>"One"</para></listitem>
<listitem><para>"Two"</para></listitem>
<listitem><para>"Three"</para></listitem>
<listitem><para>"Four"</para></listitem>
<listitem><para>"Five"</para></listitem>
<listitem><para>"Six"</para></listitem>
<listitem><para>"Seven"</para></listitem>
<listitem><para>"Eight"</para></listitem>
<listitem><para>"Nine"</para></listitem>
<listitem><para>"Cancel"</para></listitem>
</itemizedlist>
</para>

</sect2>

<sect2 id="input_number">
<title>Input Number</title>
<para>Using the input-number plugin the user can input large numbers easily.</para>


<para>Using the Dictation or the Text-Macro plugin one could associate the numbers with their digits and use that as input method. however, to input larger numbers there are two ways that both have significant disadvantages:

<itemizedlist>
<listitem><para><emphasis>Adding the words "eleven, "twelve", etc.</emphasis></para>
<para>While this seems like the most elegant solution as it would enable the user to say "fivehundredseventytwo" we can easily see that it would be quite a problem to add all these words - let alone train them. What about "twothousandninehundredtwo"? Where to stop?</para></listitem>
<listitem><para><emphasis>Spell out the number using the individual digits</emphasis></para>
<para>While this is not as elegant as stating the complete number it is much more practical.</para>
<para>However, many applications (like the great mouseless browsing firefox addon) rely on the user to input large numbers without too much time passing between the individual keystrokes (mouselss browsing for example will wait exactly 500ms per default before it considers the input of the number complete). So if you want to enter 52 you would first say "Five (pause) Two". Because of the needed pause, the application (like the mouseless browsing plugin) would consider the input of "Five" complete.</para></listitem>
</itemizedlist>
</para>

<para>
The input number plugin - when triggered - presents a calculator-like interface for inputting a number. The input can be corrected by saying "Back". It features a decimal point accessible by saying "Comma". When saying "Ok" the number will be typed out. As all the voice-input and the correction is handled by the plugin itself the application that finally receive the input will only get couple of milliseconds between the individual digits.

<screenshot>
<screeninfo>Input Number Plugin</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="command_input_number.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>
While the input number plugin is active (the user currently inputs a number), all input that is not directed at the input number plugin (other commands, etc.) will be rejected. Say "Cancel" at any time to abort the process.
</para>

<para>As there can no command instances be created of this plugin it is not listed in the "New Command" dialog. However, the input number plugin registers a configuration screen right in the command configuration when it is loaded.

<screenshot>
<screeninfo>Input Number Plugin</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="input_number_configure.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>

The trigger defines what word or phrase that will trigger the display of the interface.
</para>


<para>
To use the input number plugin, make sure that your language and acoustic model contains and allows for the following "sentences":
<itemizedlist>
<listitem><para>"Zero"</para></listitem>
<listitem><para>"One"</para></listitem>
<listitem><para>"Two"</para></listitem>
<listitem><para>"Three"</para></listitem>
<listitem><para>"Four"</para></listitem>
<listitem><para>"Five"</para></listitem>
<listitem><para>"Six"</para></listitem>
<listitem><para>"Seven"</para></listitem>
<listitem><para>"Eight"</para></listitem>
<listitem><para>"Nine"</para></listitem>
<listitem><para>"Back"</para></listitem>
<listitem><para>"Comma"</para></listitem>
<listitem><para>"Ok"</para></listitem>
<listitem><para>"Cancel"</para></listitem>
</itemizedlist>
</para>
</sect2>

<sect2 id="dictation_command_plugin">
<title>Dictation</title>
<para>The dictation plugin writes the recognition result it gets using simulated keystrokes.</para>

<para>Assuming you didn't define a trigger for the dictation plugin it will accept all recognition results and just write them out. The written input will be considered as "processed input" and thus not be relayed to other plugins. This means that if you loaded the dictation plugin and defined no trigger for it, all plugins <emphasis>below it</emphasis> in the "Selected Plug-Ins" list in the command configuration will never receive any input.</para>

<para>As there can no command instances be created of this plugin it is not listed in the "New Command" dialog.</para>
</sect2>

<sect2 id="ai_command_plugin">
<title>Artificial Intelligence</title>
<para>The Artificial Intelligence is a just-for-fun plugin that emulates a human conversation.</para>

<para>Using the festival text to speech technology the computer can "talk" with the user and answer question or chat about the weather.</para>

<para>The plugin uses AIMLs for the actual "intelligence". Most AIML sets should be supported. The popular <ulink url="http://www.pandorabots.com/pandora/talk?botid=f5d922d97e345aa1">A. L. I. C. E. bot</ulink> and a German version work and are shipped with the plugin.

<screenshot>
<screeninfo>AI Plugin</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="ai_configure.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>

The plugin registers a configuration screen in the command configuration menu where you can choose which AIML set to load.
</para>

<para>simon will look for AIML sets in the following directory: 
<itemizedlist>
<listitem><para>GNU/Linux: <filename>`kde4-config --prefix`/share/apps/ai/aimls/</filename></para></listitem> 
<listitem><para>Microsoft Windows: <filename>[installation folder (C:\Programme\simon 0.2\ by default)]\share\apps\ai\aimls\</filename></para></listitem>
</itemizedlist>
To add a new set just create a new directory with a descriptive name and copy the .aiml files into it.
</para>

<para>
To adjust your bots personality have a look at the bot.xml and vars.xml files in the following directory:
<itemizedlist>
<listitem><para>GNU/Linux: <filename>`kde4-config --prefix`/share/apps/ai/util/</filename></para></listitem> 
<listitem><para>Microsoft Windows: <filename>[installation folder (C:\Programme\simon 0.2\ by default)]\share\apps\ai\util\</filename></para></listitem>
</itemizedlist>
</para>

<para>The plugin will use <ulink url="http://tcts.fpms.ac.be/synthesis/mbrola.html">mbrola voices</ulink> if they are installed.</para>

<para>As there can no command instances be created of this plugin it is not listed in the "New Command" dialog.</para>

<para>It is recommended to not use any trigger for this plugin to provide a more natural "feel" for the conversation. The AI plugin <emphasis>will</emphasis> pass any input through to the other plugins, even tough it will react on any input given. This makes it possible to add a "conversation" to the command &amp; controll use-case by developing custom AIMLs sets (e.g.: User: "Computer, open Firefox"; Computer: "Certainly, Sir! Starting Firefox..."; Firefox opens).</para>

<para>Please keep in mind that the AI plugin will only work if festival is installed, set-up correctly and lies in your system path.</para>
</sect2>
</sect1>



<sect1 id="configuration">
<title>Configuration</title>
<para>
simon was designed with high configurability in mind.
</para>

<sect2 id="configuration_general">
<title>General Configuration</title>
<para>The general configuration page lists some basic settings.</para>
<para>
<screenshot>
<screeninfo>General Configuration</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure_general.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>
<para>
Please note that the option to start simon at login will work on both Microsoft Windows and when you are using KDE on Linux. Support for other desktop environments like Gnome, XFCE, etc. might require manually placing simon in the session autostart (please refer to the respective manuals of your desktop environment).
</para>
<para>
When the option to start simon minimized is selected, simon will minimize to the system tray immidiatly after starting.
</para>
</sect2>

<sect2 id="soundconfiguration">
<title>Sound Configuration</title>
<para>
simon uses <ulink url="http://www.portaudio.com">portaudio</ulink> to record and play sound. Portaudio is also used to gather data from the microphone which is then sent to the simond server for recognition.
</para>

<sect3 id="soundconfiguration_device">
<title>Device Configuration</title>
<para>The sound device configuration allows you to choose which sound device to use, how many channels to use and at which samplerate to record.</para>
<para>
Most of the time you will want to use 1 channel and 16kHz (which is also the default) because the recognition only works on mono input and works best at 16kHz (8kHz being the other option).</para>

<para>However, some low-cost sound cards might not support this particular mode in which case simon can in many cases work around this limitation by using postprocessing chains and 3rd party software. Please see the <link linkend="soundconfiguration_postprocessing">postprocessing section</link> for more details.</para>

<para>Bottom line: Only change the channel and the samplerate if you really know what you are doing. Otherwise the recognition will <emphasis>most likely</emphasis> not work.</para>

<para>
<screenshot>
<screeninfo>Sound Configuration: General</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure_sound_1.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>Use the selection boxes to change the device. Use the reload button if you have changed the sound configuration since you started simon. Due to portaudio limitations this might not always work. If you device just wont show up, try restarting simon.</para>
</sect3>

<sect3 id="soundconfiguration_font">
<title>Font</title>
<para>The text that is recorded to train the acoustic model (through explicit training or when adding a word) is displayed in a configurable font. This font can be changed here.</para>
<para>
<screenshot>
<screeninfo>Sound Configuration: Font</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure_sound_2.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>This option has been introduced after we have worked with a few clients suffering spastic disability. While we used the mouse to control simon during the training, they had to read what was on the screen. At first this was very problematic as the regular font size is relatively small and they had trouble making out what to read. This is why we made the font and the font size of the recording prompt configurable.</para>
</sect3>

<sect3 id="soundconfiguration_postprocessing">
<title>Postprocessing</title>
<para>All recorded (training) and imported (through the import training data) samples can be processed using a series of postprocessing commands. Postprocessing chains are an advanced feature and shouldn't be needed by the average user.</para>

<para>
<screenshot>
<screeninfo>Sound Configuration: Postprocessing</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure_sound_3.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>The postprocessing commands can be seen as a chain of filters through which the recordings have to pass through. Using these "filters" one could define commands to suppress background noise in the training data or normalize the recordings.</para>

<para>Given the program "process_audio" which takes the input- and output files as its arguments (e.g.: "process_audio in.wav out.wav") the postprocessing command would be: "process_audio %1 %2". The two placeholders %1 and %2 will be replaced by the input filename and the output filename respectively.</para>

<para>The switch to "apply filters to recordings recorded with simon" enables the postprocessing chains for samples recorded during the training (including the initial training while adding the word). If you don't select this switch the postprocesing commands are only applied to imported samples (through the <link linkend="import_trainings-data">import trainings-data wizard</link>).</para>

<para>One common use-case of postprocessing chains would be the resampling of audio because of hardware limitations. Given a soundcard that does not support mono 16kHz recordings but only supports 44100Hz stereo ("CD") recordings, one could use the free command line sound processing utility <ulink url="http://sox.sourceforge.net">SoX</ulink> to resample the recorded files after the recording.</para>
<para>This example would require the following postprocessing command:
<itemizedlist>
<listitem><para><filename>sox -c 1 -r 16000 %1 %2</filename></para></listitem>
</itemizedlist>
</para>

<para>Using this command you can safely record in 44100Hz and 2 channels and - assuming the option to apply the filters to recordings recorded with simon is selected - simon will automatically downsample them to 16000Hz and 1 channel automatically after recording them. Make sure to adjust your <link linkend="soundconfiguration_device">sound device configuration</link> accordingly.</para>
</sect3>
</sect2>

<sect2 id="configuration_speechmodel">
<title>Speech Model</title>
<para>Here you can adjust the parameters of the speech model.</para>

<para>
<screenshot>
<screeninfo>Speech Model Configuration</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure_speech_model.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>
<para>The samplerate set here is the target samplerate of the acoustic model. It has nothing to do with the recording samplerate and it is the responsibility of the user to ensure that the samples are actually made available in that format (usually by recording in that exact samplerate or by defining postprocessing commands that resample the files; see the <link linkend="soundconfiguration">sound configuration section</link> for more details).</para>

<para>Usually either 16kHz or 8kHz models are built / used. 16kHz models will have higher accuracy over 8kHz models. Going higher than 16kHz is not recommended as it is very cpu-intensive and in practice probably wont result in higher recognition rates.</para>

<para>Moreover, the path to the trainings-samples can be adjusted. However, be sure that the previously gathered trainings-samples are also moved to the new location. If you use automatic synchronization the simond would alternatively also provide simon with the missing sample but copying them manually is still recommended for performance reasons.</para>

</sect2>

<sect2 id="configuration_model_extensions">
<title>Model Extensions</title>

<para>Using the model (internet) extensions simon can fetch additional resources around your speech model from the internet. At the moment only the download of trainings-texts is supported but more features are planned for the future.</para>
<para>
<screenshot>
<screeninfo>Model Extensions</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure_model_extensions.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>
<para>
simon provides the feature to <link linkend="import_texts_remote">download new texts directly off of the internet</link>. This is based on a central repository. The URL to this repository can be changed here. The default configuration points to a sample repository hosted by the simon team.
</para>

</sect2>


<sect2 id="configure_server">
<title>Server Configuration</title>
<para>Using the server configuration you can set parameters of the connection to simond.</para>

<sect3 id="configure_server_general">
<title>General</title>
<para>
The simon main application connects to the simond server (see the <link linkend="architecture">architecture section</link> for more information).
</para>

<para>
<screenshot>
<screeninfo>Configure Server: General</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure_simond_1.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>
To identify individual users of the system (one simond server can of course serve multiple simon clients), simon and simond use users. Every user has his own speech model. The username / password combination given here is used to log in to simond. If simond does not know the username or the password is incorrect, the connection will fail. See the <ulink url="help:/simond">simond manual</ulink> on how to setup users for simond.</para>

<para>The recognition itself - which is done by the server - might not be available at all times. For example it would not be possible to start the recognition as long as the user does not have a compiled acoustic and language model which has to be created first (during synchronization when all the ingredients - wordlist, grammar, training - are present). Using the option to start the recognition automatically once it is available, simon will request to start the recognition when it receives the information that it is ready (acoustic and language model is available).</para>

<para>Using the "Connect automatically on simon start" option, simon will automatically start the connection to the configured simond servers after it has finished loading the user interface.</para>
</sect3>

<sect3 id="configure_server_network">
<title>Network</title>
<para>simon connects to simond using TCP/IP.</para>

<para>
<screenshot>
<screeninfo>Configure Server: Network</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure_simond_2.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>
<para>
As of yet (simon 0.2), encryption is not yet supported.
</para>
<para>
The timeout setting specifies, how long simon will wait for a first reply when contacting the hosts. If you are on a very, very slow network and/or use "connect on start" on a very slow machine, you may want to increase this value if you keep getting timeout errors and can resolve them by trying again repeatedly.
</para>
<para>simon supports to be configured to use more than one simond. This is very useful if you for example are going to use simon on a laptop which connects to a different server depending where you are. You could for example add the server you use when you are home and the server used when you are at work. When connecting, simon will try to connect to each of the servers (in order) until it finds one server that accepts the connection.</para>

<para>To add a server, just enter the hostname or IP and the port (separated by ":") or use the dialog that appears when you select the blue arrow next to the input field.</para>

</sect3>
</sect2>


<sect2 id="configure_synchronization">
<title>Synchronization and Model Backup</title>
<para>Here you can configure the model synchronization and restore older versions of your speech model.</para>

<para>
<screenshot>
<screeninfo>Synchronization and Model Backup</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="configure_synchronization.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</screenshot>
</para>

<para>
Only after the speech model is synchronized the changes take effect and a new restore point is set. This is why per default simon will always synchronize the model with the server when it changes. This is called "Automatic Synchornization" and is the recommended setting. 
</para>
<para>
However, if you want more control you can instruct simon to ask you before starting the synchronization after the model has changed or to rely on manual synchronization all together. When selecting the manual synchronization you have to manually use the "Synchronization" menu item of the simon main window (also see the section <link linkend="main_window">simon main window</link>) every time you want to compile the speech model.
</para>

<para>The simon server will maintain a copy of the last five iterations of model files. However, this only includes the "source files" (the wordlist, grammar, etc.) - <emphasis>not the compiled model</emphasis>. However, the compiled model will be regenerated from the restored source files automatically.</para>

<para>After you have connected to the server, you can select one of the available models and restore it by clicking on "Restore Model".</para>

<para>Please note that the synchronization will only accept complete source models (containing a wordlist, a grammar and some trainingssamples) so incomplete models will not be stored on the server and thus not be backupped.</para>

</sect2>



<sect2 id="configure_actions">
<title>Actions</title>
<para>Please see the <link linkend="commands">command section</link>.</para>
</sect2>


<sect2 id="jconfs">
<title>Adjusting the recognition parameters manually</title>

<para>
simon is targeted towards end-users. It's interface is designed to allow even users without any background in speech technology to design their own language and acoustic models by providing reasonable default values for simple uses.
</para>
<para>
In special cases (severe speech impairments for example), special configuration might be needed. This is why the raw configuration files for the recognition are also respected by simon and can of course be modified to suit your needs.
</para>

<para>There are basically to parts of the Julius configuration that can be adjusted:
<itemizedlist>
<listitem><para>adin.jconf</para><para>This is the configuration of the simon client of the Soundstream sent from simon to the simond. This file is directly read by the adinstreamer.</para>
<para>simon ships with a default adin.jconf without any special parameters. You can change this system wide configuration which will affect all users if there are different user accounts on your machine who all use simon. To just change the configuration of one of those users copy the file to the user path (see below) and edit this copy.</para>
</listitem>
<listitem><para>julius.jconf</para><para>This is a configuration of the simond server and directly influences the recognition. This file is parsed by libjulius and libsent directly.</para>
<para>simond ships with a default julius.jconf. Whenever there is a new user added to the simond database, simond will automatically copy this system wide configuration to the new user. After that the user is of course free to change it but it won't affect the other users. This way the "template" (the system wide configuration) can be changed without affecting other users.</para>
</listitem>
</itemizedlist>
</para>

<para>The path to the Julius configuration files will depend on your plattform:

<table frame='all'><title>Julius Configuration Files</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>
<colspec colname='c1'/>
<colspec colname='c2'/>
<colspec colname='c3'/>
<thead>
<row>
  <entry>File</entry>
  <entry>Microsoft Windows</entry>
  <entry>GNU/Linux</entry>
</row>
</thead>
<tbody>
<row>
  <entry>adin.jconf (system)</entry>
  <entry>(installation path)\share\apps\simon\adin.jconf</entry>
  <entry>`kde4-config --prefix`/share/apps/simon/adin.jconf</entry>
</row>
<row>
  <entry>adin.jconf (user)</entry>
  <entry>%appdata%\.kde\share\apps\simon\adin.jconf</entry>
  <entry>~/.kde/share/apps/simon/adin.jconf</entry>
</row>
<row>
  <entry>julius.jconf (template)</entry>
  <entry>(installation path)\share\apps\simond\default.jconf</entry>
  <entry>`kde4-config --prefix`/share/apps/simond/default.jconf</entry>
</row>
<row>
  <entry>julius.jconf (user)</entry>
  <entry>%appdata%\.kde\share\apps\simond\models\(user)\active\julius.jconf</entry>
  <entry>~/.kde/share/apps/simond/models/(user)/active/julius.jconf</entry>
</row>
</tbody>
</tgroup>
</table>
</para>

</sect2>

</sect1>

</chapter>



<chapter id="faq">
<title>Questions and Answers</title>

<para>
In an effort to keep this section always up-to-date it is available at our <ulink url="http://www.cyber-byte.at/wiki/index.php/English:_Troubleshooting">online wiki</ulink>.
</para>

</chapter>

<chapter id="credits">

<!-- Include credits for the programmers, documentation writers, and
contributors here. The license for your software should then be included below
the credits with a reference to the appropriate license file included in the KDE
distribution. -->

<title>Credits and License</title>

<para>
&kmyapplication;
</para>
<para>
Program copyright 2006-2009 Peter Grasch <email>grasch@simon-listens.org</email>, Phillip Goriup, Tschernegg Susanne, Bettina Sturmann, Martin Gigerl
</para>

<para>
Documentation Copyright &copy; 2009 Peter Grasch <email>grasch@simon-listens.org</email>
</para>

<!-- TRANS:CREDIT_FOR_TRANSLATORS -->

&underFDL;               <!-- FDL: do not remove -->

<!-- Determine which license your application is licensed under,
     and delete all the remaining licenses below:

     (NOTE:  All documentation are licensed under the FDL,
     regardless of what license the application uses) -->

&underGPL;        	 <!-- GPL License -->

</chapter>

<appendix id="installation">
<title>Installation</title>
<para>Please see our <ulink url="http://www.cyber-byte.at/wiki/index.php/English:_Setup">wiki</ulink> for install instructions.</para>

</appendix>

&documentation.index;
</book>

<!--
Local Variables:
mode: xml
sgml-minimize-attributes:nil
sgml-general-insert-case:lower
sgml-indent-step:0
sgml-indent-data:nil
End:

vim:tabstop=2:shiftwidth=2:expandtab
kate: space-indent on; indent-width 2; tab-width 2; indent-mode none;
-->
